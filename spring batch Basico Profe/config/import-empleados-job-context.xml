<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/batch 
	http://www.springframework.org/schema/batch/spring-batch.xsd">

 	<batch:job id="muestraEmpleadosFromDb">
		<batch:step id="muestraBdEmpleadosSingleJob">
			<batch:tasklet transaction-manager="transactionManagerMem">
				<batch:chunk reader="empleadosJdbcReader" writer="empleadosConsoleWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="empleadosConsoleWriter"
		class="profe.springbatch.empleados.batch.EmpleadoConsoleItemWriter"
		scope="step" />

	<bean id="empleadosJdbcReader"
			class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource"/>
		<property name="sql" value="select cif, nombre, apellidos, edad from empleados"/>
		<property name="rowMapper" ref="empleadoRowMapper"/>
	</bean>

	<bean id="empleadoRowMapper"
		class="profe.springbatch.empleados.batch.EmpleadoRowMapper"/>
		
	<batch:job id="importMultiItems" restartable="true">
		<batch:step id="readWriteMultiItems">
			<batch:tasklet>
				<batch:chunk reader="multiItemsDelOneLineReader" writer="itemJdbcWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="itemJdbcWriter" class="profe.springbatch.products.batch.GenericItemWriter" />
	
	<bean id="multiItemsDelOneLineReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputMultiItemsFileDelOneLine'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="multiItemsLineMapper" />
	</bean>

	<bean id="multiItemsLineMapper"
			class="org.springframework.batch.item.file.mapping.PatternMatchingCompositeLineMapper">
		<property name="tokenizers">
			<map>
				<entry key="PR*" value-ref="delimitedLineProductsTokenizer"/>
				<entry key="*" value-ref="delimitedLineEmpleadosTokenizer"/>
			</map>
		</property>
		<property name="fieldSetMappers">
			<map>
				<entry key="PR*">
					<bean class="profe.springbatch.products.batch.ProductFieldSetMapper" />
				</entry>
				<entry key="*" value-ref="empleadoBeanWrapperFieldSetMapper"/>
			</map>
		</property>
	</bean>

	<batch:job id="importEmpleados" restartable="true">
		<batch:step id="readWriteEmpleadosDelOneLine" next="readWriteEmpleadosDelMultiLine">
			<batch:tasklet>
				<batch:chunk reader="empleadosReaderDelOneLine" writer="empleadosJdbcWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="readWriteEmpleadosDelMultiLine" next="readWriteEmpleadosJson">
			<batch:tasklet>
				<batch:chunk reader="empleadosReaderDelMultiLine" writer="empleadosJdbcWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="readWriteEmpleadosJson"  next="muestraBdEmpleados">
			<batch:tasklet>
				<batch:chunk reader="empleadosReaderJson" writer="empleadosJdbcWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="muestraBdEmpleados">
			<batch:tasklet transaction-manager="transactionManagerMem">
				<batch:chunk reader="empleadosJdbcReader" writer="empleadosConsoleWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="empleadosReaderDelOneLine" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputFileDelOneLine'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="empleadosDefLineMapper" />
	</bean>

	<bean id="empleadosReaderDelMultiLine" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputFileDelMultiLine'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="empleadosDefLineMapper" />
		<property name="recordSeparatorPolicy" ref="puntoYComaRecordSepPolicy" />
	</bean>

	<bean id="puntoYComaRecordSepPolicy" class="profe.springbatch.empleados.batch.PuntoYComaRecordSepPolicy" />

	<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		id="empleadosDefLineMapper">
		<property name="lineTokenizer" ref="delimitedLineAlmEmpleadosTokenizer" />
		<property name="fieldSetMapper" ref="empleadoBeanWrapperFieldSetMapper" />
	</bean>

	<bean id="empleadoBeanWrapperFieldSetMapper"
		class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
		<property name="prototypeBeanName" value="empleado" />
	</bean>
	
	<bean id="empleado" class="profe.empleados.model.Empleado" scope="prototype" />

	<bean id="delimitedLineEmpleadosTokenizer"
			class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="names" value="cif,nombre,apellidos,edad" />
	</bean>

	<bean id="delimitedLineAlmEmpleadosTokenizer"
			class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="delimiter" value="#" />
		<property name="names" value="cif,nombre,apellidos,edad" />
	</bean>

	<bean id="empleadosReaderJson" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputFileJson'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="jsonEmpleadosMapper" />
		<property name="recordSeparatorPolicy" ref="jsonRecordSepPolicy" />
	</bean>

	<bean id="jsonRecordSepPolicy" class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>

	<bean id="jsonEmpleadosMapper"
		class="profe.springbatch.empleados.batch.JSONWrapperEmpMapper" />
		


<!-- 
	
	<bean id="jsonRecordSepPolicy" class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>

	<bean id="jsonEmpleadosMapper"
		class="profe.springbatch.empleados.batch.JSONWrapperMapper" />
		
	<bean id="jsonLineMapper" class="org.springframework.batch.item.file.mapping.JsonLineMapper" /> 
	
		<bean id="fixedLengthEmpleadosTokenizer"
			class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
		<property name="columns" value="1-9,10-35,36-50,51-56" />
		<property name="names" value="id_empleadoo,name,desc,pvp" />
	</bean>
			
		<property name="fieldSetMapper">
			<bean class="profe.springbatch.empleados.batch.EmpleadoFieldSetMapper" />
		</property>
	
	-->	
	
<!-- 	<bean id="empleadosConsoleWriter"
		class="profe.springbatch.empleados.batch.EmpleadoConsoleItemWriter"
		scope="step" />
 -->
 
	<bean id="empleadosJdbcWriter" class="profe.springbatch.empleados.batch.EmpleadoJdbcItemWriter"
		scope="step">
		<constructor-arg ref="dataSource" />
	</bean>

</beans>