<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/batch 
	http://www.springframework.org/schema/batch/spring-batch.xsd">

 	<batch:job id="muestraEmpleadosFromDb">
		<batch:step id="muestraBdEmpleadosSingleJob">
			<batch:tasklet transaction-manager="transactionManagerMem">
				<batch:chunk reader="empleadosJdbcReader" writer="empleadoClassItemWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

 	<batch:job id="transformaEmpleadosEnProductos">
		<batch:step id="tEePSingleJob">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="empleadosJdbcReader" writer="productsJdbcWriter"
					processor="itemProcessorAdapter" commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<batch:job id="importEmpleados" restartable="true">
		<batch:step id="readWriteEmpleadosDelOneLine">
			<batch:tasklet>
				<batch:chunk reader="empleadosReaderDelOneLine" writer="empleadoSpringJdbcItemWriter"
							commit-interval="3" skip-limit="1">
 					<batch:skippable-exception-classes>
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
				<batch:listeners>
					<batch:listener>
						<bean class="profe.springbatch.empleados.batch.SkippedItemsStepListener" />
					</batch:listener>
				</batch:listeners>
			</batch:tasklet>
			<batch:next on="*" to="readWriteEmpleadosDelMultiLine" />
			<batch:next on="COMPLETED_WITH_SKIPS" to="readWriteEmpleadosJson" />
			<batch:next on="FAILED" to="muestraBdEmpleados" />
		</batch:step>
		<batch:step id="readWriteEmpleadosDelMultiLine" next="readWriteEmpleadosJson">
			<batch:tasklet>
				<batch:chunk reader="empleadosReaderDelMultiLine" writer="empleadoSpringJdbcItemWriter"
					commit-interval="3">
						<batch:streams>
                        	<batch:stream ref="empleadosFileDelWriter" />
                        </batch:streams>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="readWriteEmpleadosJson"  next="muestraBdEmpleados">
			<batch:tasklet>
				<batch:chunk reader="empleadosReaderJson" writer="empleadoSpringJdbcItemWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="muestraBdEmpleados">
			<batch:tasklet transaction-manager="transactionManagerMem">
				<batch:chunk reader="empleadosJdbcReader" writer="empleadosConsoleWriter"
					commit-interval="3">
				</batch:chunk>
				<batch:listeners>
					<batch:listener>
						<bean class="profe.springbatch.empleados.batch.WriteInfoStepListener" />
					</batch:listener>
				</batch:listeners>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<bean id="jobInfo" class="profe.springbatch.empleados.batch.EmpleadosJobInfo" />
	
	<batch:job id="importMultiItems" restartable="true">
		<batch:step id="readWriteMultiItems">
			<batch:tasklet>
				<batch:chunk reader="multiItemsDelOneLineReader" writer="itemJdbcWriter"
					commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

<!-- <bean id="empAdultsValItemProcessor" class="org.springframework.batch.item.validator.ValidatingItemProcessor">
		<property name="validator" ref="xxx" />
		<property name="filter" value="false" />
	</bean> -->	
	
	<bean id="itemProcessorAdapter"
		class="org.springframework.batch.item.adapter.ItemProcessorAdapter">
		<property name="targetObject" ref="transformaEmpEnProdNegocio" />
		<property name="targetMethod" value="transforma" />
	</bean>
	

	<bean id="transformaEmpEnProdNegocio" class="profe.empleados.negocio.TransformEmpleadoEnProducto" />
	
	<bean id="transformaEmpEnProd" class="profe.springbatch.empleados.batch.EmpleadosProductosItemProcessor" />
	
	<bean id="empleadoClassItemWriter"
			class="org.springframework.batch.item.support.ClassifierCompositeItemWriter">
		<property name="classifier">
			<bean class="org.springframework.classify.BackToBackPatternClassifier">
				<property name="routerDelegate">
					<bean class="profe.springbatch.empleados.batch.EmpleadoRouterClassifier" />
				</property>
				<property name="matcherMap">
					<map>
						<entry key="A" value-ref="empleadosFileDelWriter" />
						<entry key="M" value-ref="empleadosConsoleWriter" />
					</map>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="empleadoSpringJdbcItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="assertUpdates" value="true" />
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
		<property name="sql"
			value="INSERT INTO empleados (cif, nombre, apellidos, edad) VALUES(:cif, :nombre, :apellidos, :edad)" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="empleadosFileDelWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:data/target/delimitedline-empleados.txt" />
		<property name="encoding" value="cp1252" />
		<property name="lineAggregator" ref="delEmpLineAgg" />
	</bean>
	
	<bean id="cabeceraFileEmp" class="profe.springbatch.empleados.batch.CabeceraFileEmp" />

	<bean id="delEmpLineAgg"
			class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
		<property name="delimiter" value="#" />
		<property name="fieldExtractor">
			<bean
				class="profe.springbatch.empleados.batch.EmpContFieldExtractor" />
		</property>
	</bean>

	<bean
		class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
		<property name="names" value="cif,nombre,apellidos,edad" />
	</bean>
	
	<bean id="empleadosConsoleWriter"
		class="profe.springbatch.empleados.batch.EmpleadoConsoleItemWriter"
		 />

	<bean id="empleadosJdbcReader"
			class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource"/>
		<property name="sql" value="select cif, nombre, apellidos, edad from empleados"/>
		<property name="rowMapper" ref="empleadoRowMapper"/>
	</bean>

	<bean id="empleadoRowMapper"
		class="profe.springbatch.empleados.batch.EmpleadoRowMapper"/>
		
	<bean id="itemJdbcWriter" class="profe.springbatch.products.batch.GenericItemWriter" />
	
	<bean id="multiItemsDelOneLineReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputMultiItemsFileDelOneLine'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="multiItemsLineMapper" />
	</bean>

	<bean id="multiItemsLineMapper"
			class="org.springframework.batch.item.file.mapping.PatternMatchingCompositeLineMapper">
		<property name="tokenizers">
			<map>
				<entry key="PR*" value-ref="delimitedLineProductsTokenizer"/>
				<entry key="*" value-ref="delimitedLineEmpleadosTokenizer"/>
			</map>
		</property>
		<property name="fieldSetMappers">
			<map>
				<entry key="PR*">
					<bean class="profe.springbatch.products.batch.ProductFieldSetMapper" />
				</entry>
				<entry key="*" value-ref="empleadoBeanWrapperFieldSetMapper"/>
			</map>
		</property>
	</bean>



	<bean id="empleadosReaderDelOneLine" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputFileDelOneLine'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="empleadosDefLineMapper" />
	</bean>

	<bean id="empleadosReaderDelMultiLine" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputFileDelMultiLine'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="empleadosDefLineMapper" />
		<property name="recordSeparatorPolicy" ref="puntoYComaRecordSepPolicy" />
	</bean>

	<bean id="puntoYComaRecordSepPolicy" class="profe.springbatch.empleados.batch.PuntoYComaRecordSepPolicy" />

	<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		id="empleadosDefLineMapper">
		<property name="lineTokenizer" ref="delimitedLineAlmEmpleadosTokenizer" />
		<property name="fieldSetMapper" ref="empleadoBeanWrapperFieldSetMapper" />
	</bean>

	<bean id="empleadoBeanWrapperFieldSetMapper"
		class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
		<property name="prototypeBeanName" value="empleado" />
	</bean>
	
	<bean id="empleado" class="profe.empleados.model.Empleado" scope="prototype" />

	<bean id="delimitedLineEmpleadosTokenizer"
			class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="names" value="cif,nombre,apellidos,edad" />
	</bean>

	<bean id="delimitedLineAlmEmpleadosTokenizer"
			class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="delimiter" value="#" />
		<property name="names" value="cif,nombre,apellidos,edad" />
	</bean>

	<bean id="empleadosReaderJson" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:#{ jobParameters['inputDir'] + jobParameters['inputFileJson'] }" />
		<property name="encoding" value="UTF-8" />
		<property name="lineMapper" ref="jsonEmpleadosMapper" />
		<property name="recordSeparatorPolicy" ref="jsonRecordSepPolicy" />
	</bean>

	<bean id="jsonRecordSepPolicy" class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>

	<bean id="jsonEmpleadosMapper"
		class="profe.springbatch.empleados.batch.JSONWrapperEmpMapper" />
		


<!-- 
	
	<bean id="jsonRecordSepPolicy" class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>

	<bean id="jsonEmpleadosMapper"
		class="profe.springbatch.empleados.batch.JSONWrapperMapper" />
		
	<bean id="jsonLineMapper" class="org.springframework.batch.item.file.mapping.JsonLineMapper" /> 
	
		<bean id="fixedLengthEmpleadosTokenizer"
			class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
		<property name="columns" value="1-9,10-35,36-50,51-56" />
		<property name="names" value="id_empleadoo,name,desc,pvp" />
	</bean>
			
		<property name="fieldSetMapper">
			<bean class="profe.springbatch.empleados.batch.EmpleadoFieldSetMapper" />
		</property>
	
	-->	
	
<!-- 	<bean id="empleadosConsoleWriter"
		class="profe.springbatch.empleados.batch.EmpleadoConsoleItemWriter"
		scope="step" />
 -->
 
	<bean id="empleadosJdbcWriter" class="profe.springbatch.empleados.batch.EmpleadoJdbcItemWriter"
		scope="step">
		<constructor-arg ref="dataSource" />
	</bean>

</beans>